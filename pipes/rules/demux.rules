"""
    This is a basic framework for demultiplexing viral read data from
    the Broad Institute's walk-up sequencing platform.


    Basically the inputs are:
     - a tabular file describing sample name, barcode1 seq, barcode2 seq, and library id
        for each sample. One such tab file per pool.
     - the flowcell ID and lane number
     - the Illumina data directory (optionally compressed, optionally remote)
"""

__author__ = 'Kristian Andersen <andersen@broadinstitute.org>, Daniel Park <dpark@broadinstitute.org>'

from snakemake.utils import makedirs
import os, os.path, time, shutil

def iterate_lanes(runfile):
    if not os.path.isfile(runfile):
        return []
    for lane in read_tab_file(runfile):
        yield lane
    
def iterate_wells(runfile):
    for lane in iterate_lanes(runfile):
        for well in read_tab_file(lane['barcode_file']):
            yield (lane,well)

def get_one_lane_from_run(flowcell, lane, runfile):
    lanes = [x for x in iterate_lanes(runfile) if x['flowcell']==flowcell and x['lane']==lane]
    assert len(lanes)==1
    return lanes[0]

def get_all_lanes(runfile):
    return list(sorted(set(
        '.'.join((lane['flowcell'], lane['lane']))
        for lane in iterate_lanes(runfile))))

def get_run_id(well):
    # this is actually used by hs_deplete.rules also!
    run_id = well['sample']
    if well.get('library_id_per_sample'):
        run_id += '.l' + well['library_id_per_sample']
    return run_id

def get_bam_path(lane, well):
    return os.path.join(config['tmp_dir'], config['subdirs']['demux'],
        'bams_per_lane', lane['flowcell'] + '.' + lane['lane'],
        get_run_id(well) + ".bam")

def get_all_runs(runfile):
    for lane, well in iterate_wells(runfile):
        yield get_run_id(well) +'.'+ lane['flowcell'] +'.'+ lane['lane']

rule all_demux_basecalls:
    input:  
            expand("{dir}/{flowlane}/{lib}.bam",
                dir = os.path.join(config['tmp_dir'], config['subdirs']['demux'], 'bams_per_lane'),
                flowlane = get_all_lanes(config.get('seqruns_demux','')),
                lib = 'Unmatched')
    params: 
        LSF="-N"

rule all_demux:
    input:
        expand("{dir}/{run}.bam",
            dir = os.path.join(config['data_dir'], config['subdirs']['source']),
            run=get_all_runs(config.get('seqruns_demux','')))
    params: 
        LSF="-N"


def illumina_demux_inputs(wildcards):
    if not config.get('seqruns_demux'):
        return "unreachable-{}-{}".format(wildcards.flowcell, wildcards.lane)
    lane = get_one_lane_from_run(wildcards.flowcell, wildcards.lane, config['seqruns_demux'])
    return objectify_remote([lane['bustard_dir'], lane['barcode_file']])
rule illumina_demux:
    input:  
        illumina_demux_inputs
    output: 
        config['tmp_dir']+'/'+config['subdirs']['demux']+'/bams_per_lane/{flowcell}.{lane}/Unmatched.bam',
        config['reports_dir']+'/barcodes/barcodes-metrics-{flowcell}.{lane}.txt',
        config['reports_dir']+'/barcodes/common-barcodes-{flowcell}.{lane}.txt'
    resources: 
        mem = 60
    params: 
        LSF    = config.get('LSF_queues', {}).get('bigmem', '-q flower'),
        UGER   = config.get('UGER_queues', {}).get('long', '-l h_rt 36:00:00'),
        logid  = "{flowcell}.{lane}",
        center = config['seq_center']
    run:
        outdir = os.path.dirname(output[0])
        shutil.rmtree(outdir, ignore_errors=True)
        makedirs(set(map(os.path.dirname, output)))
        lane = get_one_lane_from_run(wildcards.flowcell, wildcards.lane, config['seqruns_demux'])
        opts = ''
        for opt in ('minimum_base_quality', 'max_mismatches', 'min_mismatch_delta', 'max_no_calls', 'read_structure', 'minimum_quality', 'run_start_date'):
            if lane.get(opt):
                opts += ' --%s=%s' % (opt, lane[opt])
        shell("{config[bin_dir]}/illumina.py illumina_demux {input[0]} {wildcards.lane} {outdir} --sampleSheet={input[1]} --sequencing_center={params.center} --outMetrics={output[1]} --commonBarcodes={output[2]} --flowcell={wildcards.flowcell} {opts}")


def demux_move_bams_inputs(wildcards):
    lane = get_one_lane_from_run(wildcards.flowcell, wildcards.lane, config.get('seqruns_demux',''))
    for well in read_tab_file(lane['barcode_file']):
        if well['sample']==wildcards.sample and well['library_id_per_sample']==wildcards.library:
            return get_bam_path(lane, well)
    return "unreachable-{}-{}-{}-{}".format(wildcards.sample, wildcards.library, wildcards.flowcell, wildcards.lane)
rule move_bams_demux:
    input:  
        demux_move_bams_inputs
    output: 
        config['data_dir']+'/'+config['subdirs']['source']+'/{sample}.l{library}.{flowcell}.{lane}.bam'
    params: 
        logid = "{sample}.l{library}.{flowcell}.{lane}"
    run:
        makedirs(os.path.join(config['data_dir'], config['subdirs']['source']))
        shutil.move(input[0], output[0])

rule bams_from_fastq:
    input:  
        os.path.join(config['data_dir'],config['subdirs']['source'],'{sample}_L001_R1_001.fastq.gz'),
        os.path.join(config['data_dir'],config['subdirs']['source'],'{sample}_L001_R2_001.fastq.gz'),
        os.path.join(config['data_dir'],config['subdirs']['source'],'SampleSheet.csv'),
        os.path.join(config['data_dir'],config['subdirs']['source'],'RunInfo.xml')
    output: 
        os.path.join(config['data_dir'],config['subdirs']['source'],'{sample}.bam')
    params: 
        LSF    = config.get('LSF_queues', {}).get('short', '-W 4:00'),
        UGER   = config.get('UGER_queues', {}).get('short', '-l h_rt 04:00:00'),
        logid  = "{sample}",
        center = config["seq_center"]
    run:
        makedirs(os.path.join(config['data_dir'], config['subdirs']['source']))
        shell("{config[bin_dir]}/illumina.py miseq_fastq_to_bam {output} {input[2]} {input[0]} --inFastq2 {input[1]} --runInfo {input[3]} --sequencing_center {params.center}")

ruleorder: move_bams_demux > bams_from_fastq

