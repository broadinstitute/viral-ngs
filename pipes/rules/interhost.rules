"""
    This is a basic framework for alignment and SNP calling in viral genomes,
    currently tailored for EBOV.
"""

__author__ = 'Kristian Andersen <andersen@broadinstitute.org>, Daniel Park <dpark@broadinstitute.org>'

from snakemake.utils import makedirs
import os, os.path, time


def merge_vcfs(inFiles, refFasta, outFile):
    inFilesString = ' '.join(['--variant '+i for i in inFiles])
    shell("java -Xmx2g -jar /humgen/gsa-hpprojects/GATK/bin/GenomeAnalysisTK-3.3-0-g37228af/GenomeAnalysisTK.jar" \
        + " -T CombineVariants -R {refFasta} {inFilesString} -o {outFile}" \
        + " --genotypemergeoption UNIQUIFY")

def update_timestamps(files):
    ''' this dumb function exists because sometimes the different nodes on the
        cluster have out-of-sync system clocks and snakemake fails if the mtime of
        any input file is more recent than the mtimes of the output files
    '''
    for f in files:
        if os.path.isfile(f) and os.path.getmtime(f) > time.time():
            print("input file %s is more recent than present, resetting its modification time to present" % f)
            os.utime(f)

rule all_ref_guided:
    input:
            os.path.join(config["data_dir"], config["subdirs"]["interhost"], 'ref_guided.fasta'),
            os.path.join(config["data_dir"], config["subdirs"]["interhost"], 'ref_guided.vcf.gz')

rule ref_guided_consensus:
    input:  
            expand( '{refDir}/'+'{ref_name}.fasta', refDir=config["ref_genome_dir"], ref_name="reference" ),
            expand( '{refDir}/'+'{ref_name}.nix', refDir=config["ref_genome_dir"], ref_name="reference" ),
            config["data_dir"]+'/'+config["subdirs"]["per_sample"]+'/{sample}.raw.bam'
    output: config["data_dir"]+'/'+config["subdirs"]["align_ref"]+'/{sample}.realigned.bam',
            config["data_dir"]+'/'+config["subdirs"]["align_ref"]+'/{sample}.vcf.gz',
            config["data_dir"]+'/'+config["subdirs"]["align_ref"]+'/{sample}.fasta'
    resources: 
            mem=4,
            cores=int(config.get("number_of_threads", 1))
    params: LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
            UGER=config.get('UGER_queues', {}).get('short', '-q short'),
            logid="{sample}",
            novoalign_options=config.get("ref_guided_consensus_novoalign_params", "-r Random -l 30 -g 40 -x 20 -t 502"),
            min_coverage="3",
            numThreads=str(config.get("number_of_threads", 1))
    run:
            makedirs(expand("{dir}/{subdir}",
                dir=[config["data_dir"]],
                subdir=[config["subdirs"]["align_ref"], config["subdirs"]["interhost"]]))
            shell("{config[bin_dir]}/assembly.py refine_assembly {input[0]} {input[2]} {output[2]} --outBam {output[0]} --outVcf {output[1]} --min_coverage {params.min_coverage} --novo_params '{params.novoalign_options}' --keep_all_reads --chr_names " + " ".join(["{wildcards.sample}-" + str(i+1) for i in range(len(config["accessions_for_ref_genome_build"]))]) +" --threads {params.numThreads}")

rule ref_guided_consensus_aligned_with_dups:
    input: config["data_dir"]+'/'+config["subdirs"]["align_ref"]+'/{sample}.realigned.bam'
    output: config["data_dir"]+'/'+config["subdirs"]["align_ref"]+'/{sample}.realigned.only_aligned.bam'
    resources:
            mem=8,
            cores=int(config.get("number_of_threads", 1))
    params: LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
            UGER=config.get('UGER_queues', {}).get('long', '-q long'),
            logid="{sample}"
    shell: "samtools view -b -F 4 -o {output} {input}"

rule ref_guided_diversity:
    input:  
            expand("{data_dir}/{subdir}/{sample}.{ext}",
                data_dir=config["data_dir"],
                subdir=config["subdirs"]["align_ref"],
                ext = ['fasta', 'vcf.gz'],
                sample=read_samples_file(config["samples_assembly"])),
            expand( '{refDir}/'+'{ref_name}.{ext}', refDir=config["ref_genome_dir"], ref_name="reference", ext=['fasta', 'fasta.fai', 'dict'])
    output: 
            os.path.join(config["data_dir"], config["subdirs"]["interhost"], 'ref_guided.fasta'),
            os.path.join(config["data_dir"], config["subdirs"]["interhost"], 'ref_guided.vcf.gz')
    resources: mem=8
    params: LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
            UGER=config.get('UGER_queues', {}).get('short', '-q short'),
            logid="all",
            refGenome=os.path.join(config["ref_genome_dir"],"reference"+".fasta"),
            inFastas = expand("{data_dir}/{subdir}/{sample}.fasta",
                data_dir=config["data_dir"], subdir=config["subdirs"]["align_ref"],
                sample=list(read_samples_file(config["samples_assembly"]))),
            inVcfs = expand("{data_dir}/{subdir}/{sample}.vcf.gz",
                data_dir=config["data_dir"], subdir=config["subdirs"]["align_ref"],
                sample=list(read_samples_file(config["samples_assembly"])))
    run:
            update_timestamps(input)
            shell("cat " + " ".join(params.inFastas) + " > {output[0]}")
            merge_vcfs(params.inVcfs, params.refGenome, output[1])

def multi_align_mafft_memory(_, input):
    sample_count = len(list(read_samples_file(config["samples_assembly"])))
    if sample_count in range(0,50):
        mem=8
    elif sample_count in range(50,100):
        mem=16
    elif sample_count >= 100:
        mem=32
    return mem

rule multi_align_mafft:
    input:
        expand("{data_dir}/{subdir}/{sample}.fasta",
                data_dir=config["data_dir"],
                subdir=config["subdirs"]["assembly"],
                sample=read_samples_file(config["samples_assembly"])),
        expand( '{refDir}/'+'{ref_name}.fasta', refDir=config["ref_genome_dir"], ref_name="reference" )
    output:
        config["data_dir"]+'/'+config["subdirs"]["multialign_ref"] + "/sampleNameList.txt",
        expand("{data_dir}/{subdir}/aligned_{chrom}.fasta",
                data_dir=config["data_dir"],
                subdir=config["subdirs"]["multialign_ref"],
                chrom=range(1, len(config["accessions_for_ref_genome_build"])+1))        
    resources: 
            mem=multi_align_mafft_memory,
            cores=int(config.get("number_of_threads", 1))
    params: LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
            UGER=config.get('UGER_queues', {}).get('long', '-q long'),
            logid="all",
            refGenome=os.path.join(config["ref_genome_dir"],"reference"+".fasta"),
            samples=list(read_samples_file(config["samples_assembly"])),
            ep=str(config["mafft_ep"]),
            maxiters=str(config["mafft_maxiters"]),
            numThreads=str(config.get("number_of_threads", 1))
    run:
        shell("{config[bin_dir]}/interhost.py multichr_mafft {params.refGenome} "
                + " ".join(["{config[data_dir]}/{config[subdirs][assembly]}/" + s + ".fasta" for s in params.samples])
                + " {config[data_dir]}/{config[subdirs][multialign_ref]}"
                + " --ep {params.ep} --maxiters {params.maxiters} --preservecase"
                + " --localpair --outFilePrefix aligned --sampleNameListFile {output[0]} --threads {params.numThreads}")

rule index_ref:
    input:
            expand( '{refDir}/'+'{ref_name}.fasta', refDir=config["ref_genome_dir"], ref_name="reference" )
    output:
            expand( '{refDir}/'+'{ref_name}.{ext}', refDir=config["ref_genome_dir"], ref_name="reference", ext=['nix', 'fasta.fai', 'dict'])
    run:
        shell("{config[bin_dir]}/read_utils.py novoindex {input}")
        shell("{config[bin_dir]}/read_utils.py index_fasta_samtools {input}")
        shell("{config[bin_dir]}/read_utils.py index_fasta_picard {input}")
