import os.path
import textwrap

samples = list(read_samples_file(config.get("samples_metagenomics")))

rule all_metagenomics:
    input:
        expand(os.path.join(config["data_dir"], config["subdirs"]["metagenomics"],
                    "{sample}.raw.{method}.report"), sample=samples, method=['krakenuniq']),
        expand(os.path.join(config["data_dir"], config["subdirs"]["metagenomics"],
                    "{sample}.raw.{method}.krona.html"), sample=samples, method=['krakenuniq'])


rule all_metagenomics_host_depleted:
    input:
        expand(os.path.join(config["data_dir"], config["subdirs"]["metagenomics"],
                    "{sample}.cleaned.{method}.report"), sample=samples, method=['krakenuniq']),
        expand(os.path.join(config["data_dir"], config["subdirs"]["metagenomics"],
                    "{sample}.cleaned.{method}.krona.html"), sample=samples, method=['krakenuniq'])


taxfiles = [
    'names.dmp',
    'nodes.dmp',
]

taxfiles_krona = [
    'taxonomy.tab',
]


rule kaiju:
    input:
        bam       = os.path.join(config["data_dir"], config["subdirs"]["per_sample"], "{sample}.{adjective}.bam"),
        kaiju_db  = objectify_remote(config['kaiju_db']),
        taxonomy_db = objectify_remote(expand("{path_prefix}/{taxfile}", path_prefix=config['taxonomy_db'], taxfile=taxfiles))
    output:
        report = os.path.join(config["data_dir"], config["subdirs"]["metagenomics"], "{sample}.{adjective,raw|cleaned}.kaiju.report"),
        reads  = os.path.join(config["data_dir"], config["subdirs"]["metagenomics"], "{sample}.{adjective,raw|cleaned}.kaiju.reads.gz")
    resources:
        threads = int(config.get("number_of_threads", 1)),
        mem_mb  = 50*1000
    params:
        UGER = config.get('UGER_queues', {}).get('long', '-l h_rt=12:00:00')
    run:
        taxonomy_db_prefix = strip_protocol(config["taxonomy_db"], relative=True)
        shell("{config[bin_dir]}/metagenomics.py kaiju {input.bam} {input.kaiju_db} "+taxonomy_db_prefix+" {output.report} --outReads {output.reads} --threads {resources.threads}")


rule krakenuniq:
    input:
        bam = os.path.join(config["data_dir"], config["subdirs"]["per_sample"], "{sample}.{adjective}.bam")
    output:
        report = os.path.join(config["data_dir"], config["subdirs"]["metagenomics"], "{sample}.{adjective,raw|cleaned}.krakenuniq.report"),
        reads  = os.path.join(config["data_dir"], config["subdirs"]["metagenomics"], "{sample}.{adjective,raw|cleaned}.krakenuniq.reads.gz")
    resources:
        threads = int(config.get("number_of_threads", 1)),
        mem_mb     = 120*1000
    params:
        UGER = config.get('UGER_queues', {}).get('long', '-l h_rt=36:00:00')
    shell:
        """
        {config[bin_dir]}/metagenomics.py krakenuniq {config[krakenuniq_db]} {input.bam} --outReads {output.reads} --outReports {output.report} \
        --threads {resources.threads}
        """


rule all_krakenuniq:
    input:
        expand(os.path.join(config["data_dir"], config["subdirs"]["metagenomics"],
                            "{sample}.raw.krakenuniq.report"), sample=samples),
        expand(os.path.join(config["data_dir"], config["subdirs"]["metagenomics"],
                            "{sample}.raw.krakenuniq.krona.html"), sample=samples)

rule all_krakenuniq_host_depleted:
    input:
        expand(os.path.join(config["data_dir"], config["subdirs"]["metagenomics"],
                            "{sample}.cleaned.krakenuniq.report"), sample=samples),
        expand(os.path.join(config["data_dir"], config["subdirs"]["metagenomics"],
                            "{sample}.cleaned.krakenuniq.krona.html"), sample=samples)


rule krona_import_taxonomy:
    input:
        tsv = os.path.join(config["data_dir"], config["subdirs"]["metagenomics"], "{sample}.{adjective}.{method}.report"),
        krona_db = objectify_remote(expand("{path_prefix}/{kronafile}", path_prefix=config["krona_db"], kronafile=taxfiles_krona))
    output:
        os.path.join(config["data_dir"], config["subdirs"]["metagenomics"], "{sample}.{adjective,raw|cleaned}.{method,krakenuniq|kaiju}.krona.html")
    resources:
        mem_mb=32*1000
    run:
        krona_db_prefix = strip_protocol(config["krona_db"], relative=True)
        shell("{config[bin_dir]}/metagenomics.py krona {input.tsv} "+krona_db_prefix+" {output} --noRank --inputType {wildcards.method}")
