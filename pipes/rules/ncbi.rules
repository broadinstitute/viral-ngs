"""
    These are rules related to preparing data for NCBI submission, as well as creation of
    reference genomes.
"""

__author__ = 'Kristian Andersen <andersen@broadinstitute.org>, Daniel Park <dpark@broadinstitute.org>'

from snakemake.utils import makedirs
import os, os.path, time

localrules: download_reference_genome, download_lastal_sources, build_lastal_db

rule all_annot:
    input:
        config["data_dir"]+'/'+config["subdirs"]["annot"]+'/errorsummary.val'#,
        #expand("{data_dir}/{subdir}/{samp}-{chrom}.tbl",
        #            data_dir=config["data_dir"],
        #            subdir=config["subdirs"]["annot"],
        #            samp=read_samples_file(config["samples_assembly"]),
        #            chrom=range(1, len(config["accessions_for_ref_genome_build"])+1))
        #config["data_dir"]+'/'+config["subdirs"]["annot"]   +'/{sample}.tbl'


rule download_reference_genome:
    output:
        fasta         = objectify_remote(expand( '{refDir}/'+'{ref_name}.fasta', refDir=config["ref_genome_dir"], ref_name="reference" )),
        feature_table = objectify_remote(expand( '{refDir}/'+'{feature_tbl_name}.tbl', refDir=config["ref_genome_dir"], feature_tbl_name=config["accessions_for_ref_genome_build"] ))
    params:
        emailAddress=config["email_point_of_contact_for_ncbi"],
        accessionsList=" ".join(config["accessions_for_ref_genome_build"])
    run:
        #makedirs( expand( "{dir}", dir=[config["ref_genome_dir"]] ) )
        containing_directory = os.path.dirname(output.fasta[0])
        shell("{config[bin_dir]}/ncbi.py fetch_fastas {params.emailAddress} "+containing_directory+" {params.accessionsList} --combinedFilePrefix reference --removeSeparateFiles --forceOverwrite")
        shell("{config[bin_dir]}/ncbi.py fetch_feature_tables {params.emailAddress} "+containing_directory+" {params.accessionsList} --forceOverwrite")


rule download_lastal_sources:
    output:
        fasta = expand( '{lastalDb}/'+'lastal.fasta', lastalDb=config["lastal_ref_db_dir"] )
    params:
        accessionsList=" ".join(read_accessions_file(config["accessions_file_for_lastal_db_build"]) if "accessions_file_for_lastal_db_build" in config and len(config["accessions_file_for_lastal_db_build"])>0 else config["accessions_for_ref_genome_build"]),
        emailAddress=config["email_point_of_contact_for_ncbi"]
    run:
        makedirs( expand( "{dir}", dir=[config["lastal_ref_db_dir"]] ) )
        fasta_path_prefix = os.path.dirname(output.fasta[0])
        fasta_file_prefix = os.path.splitext(os.path.basename(output.fasta[0]))[0]
        shell("{config[bin_dir]}/ncbi.py fetch_fastas {params.emailAddress} "+fasta_path_prefix+" {params.accessionsList} --combinedFilePrefix "+fasta_file_prefix+" --removeSeparateFiles --forceOverwrite --chunkSize 300")


rule build_lastal_db:
    input:
        fasta = objectify_remote(expand('{lastal_ref_db_dir}/'+'lastal.fasta', lastal_ref_db_dir=config["lastal_ref_db_dir"]))
    output:
        lastalDb=objectify_remote(expand('{lastal_ref_db_dir}/lastal.{ext}', lastal_ref_db_dir=config["lastal_ref_db_dir"], ext=["bck","des","prj","sds","ssp","suf","tis"]))
    params:
        UGER=config.get('UGER_queues', {}).get('short', '-q short'),
        emailAddress=config["email_point_of_contact_for_ncbi"]
    run:
        lastal_db_path_prefix=os.path.dirname(output.lastalDb[0])
        shell("{config[bin_dir]}/taxon_filter.py lastal_build_db {input.fasta} "+lastal_db_path_prefix)

rule annot_transfer:
    input:      
                multiple_alignment_fastas = expand("{data_dir}/{subdir}/aligned_{chrom}.fasta",
                                                data_dir=config["data_dir"],
                                                subdir=config["subdirs"]["multialign_ref"],
                                                chrom=range(1, len(config["accessions_for_ref_genome_build"])+1)),
                ref_annot                 = objectify_remote(expand( '{refDir}/'+'{feature_tbl_name}.tbl', refDir=config["ref_genome_dir"], feature_tbl_name=config["accessions_for_ref_genome_build"] )),
                ref_genome                = objectify_remote(expand( '{refDir}/'+'{ref_name}.fasta', refDir=config["ref_genome_dir"], ref_name="reference" ))
    output:     
                feature_tables = expand("{data_dir}/{subdir}/{samp}-{chrom}.tbl",
                    data_dir=config["data_dir"],
                    subdir=config["subdirs"]["annot"],
                    samp=read_samples_file(config["samples_assembly"]),
                    chrom=range(1, len(config["accessions_for_ref_genome_build"])+1))
    resources:  mem=4
    params:     LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
                UGER=config.get('UGER_queues', {}).get('short', '-q short'),
    run:
        output_path_prefix = os.path.dirname(output.feature_tables)
        for alignmentFile in expand("{data_dir}/{subdir}/aligned_{chrom}.fasta",
                                        data_dir=config["data_dir"],
                                        subdir=config["subdirs"]["multialign_ref"],
                                        chrom=range(1, len(config["accessions_for_ref_genome_build"])+1)):
            shell("{config[bin_dir]}/ncbi.py tbl_transfer_prealigned " + alignmentFile + " {input.ref_genome} {input.ref_annot} "+output_path_prefix+" --oob_clip")

rule prepare_genbank:
    input:
                assembly_summary = config["reports_dir"]+"/summary.assembly.txt",
                feature_tables = expand("{data_dir}/{subdir}/{samp}-{chrom}.tbl",
                    data_dir=config["data_dir"],
                    subdir=config["subdirs"]["annot"],
                    samp=read_samples_file(config["samples_assembly"]),
                    chrom=range(1, len(config["accessions_for_ref_genome_build"])+1)),
                fasta_files=" ".join(expand("{dir}/{subdir}/{sample}.fasta",
                    dir=[config["data_dir"]], subdir=[config["subdirs"]["assembly"]],
                    sample=list(read_samples_file(config["samples_assembly"])))),
    output:
                config["data_dir"]+'/'+config["subdirs"]["annot"]+'/errorsummary.val'
    params:
                LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
                UGER=config.get('UGER_queues', {}).get('short', '-q short'),
                genbank_template=config.get('genbank',{}).get('author_template', ''),
                genbank_source_table=config.get('genbank',{}).get('source_modifier_table', ''),
                biosample_map=config.get('genbank',{}).get('biosample_map', ''),
                seq_tech=config.get('genbank',{}).get('sequencing_technology', 'unknown'),
                comment=config.get('genbank',{}).get('comment', ''),
                logid="all"
    shell:
                ' '.join(["{config[bin_dir]}/ncbi.py prep_genbank_files",
                    "{params.genbank_template} {input.fasta_files}",
                    "{config[data_dir]}/{config[subdirs][annot]}",
                    "--master_source_table {params.genbank_source_table}",
                    "--sequencing_tech '{params.seq_tech}'",
                    "--biosample_map {params.biosample_map}",
                    "--coverage_table {config[reports_dir]}/summary.assembly.txt",
                    "--comment '{params.comment}'"])
