"""
    This is a basic framework for intrahost variant calling in viral genomes.
"""

__author__ = 'Daniel Park <dpark@broadinstitute.org>'

from snakemake.utils import makedirs
import os, os.path, time

rule all_intrahost:
    input:
            config["data_dir"]+'/'+config["subdirs"]["intrahost"] +'/isnvs.vcf.gz',
            config["data_dir"]+'/'+config["subdirs"]["intrahost"] +'/isnvs.filtered.vcf.gz'

rule isnvs_per_sample:
    input:
            config["data_dir"]+'/'+config["subdirs"]["align_self"]+'/{sample}.mapped.bam',
            config["data_dir"]+'/'+config["subdirs"]["assembly"]  +'/{sample}.fasta',
    output: config["data_dir"]+'/'+config["subdirs"]["intrahost"] +'/vphaser2.{sample}.txt.gz'
    resources: 
            mem=7,
            threads=int(config.get("number_of_threads", 1))
    params: LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
            UGER=config.get('UGER_queues', {}).get('short', '-q short'),
            logid="{sample}",
            threads=str(config.get("number_of_threads", 1)),
            minReadsPerStrand="--minReadsEach {}".format(config['vphaser_min_reads_each']) if 'vphaser_min_reads_each' in config else "",
            maxBias="--maxBias {}".format(config['vphaser_max_bins']) if 'vphaser_max_bins' in config else ""
    run:
            makedirs(config["data_dir"]+'/'+config["subdirs"]["intrahost"])
            shell("{config[bin_dir]}/intrahost.py vphaser_one_sample {input} {output} --vphaserNumThreads {params.threads} --removeDoublyMappedReads {params.minReadsPerStrand} {params.maxBias}")
            
rule isnvs_vcf:
    input:
            # config["data_dir"]+'/'+config["subdirs"]["multialign_ref"] + "/sampleNameList.txt",
            isnv_files               = expand("{data_dir}/{subdir}/vphaser2.{sample}.txt.gz",
                                            data_dir=config["data_dir"],
                                            subdir=config["subdirs"]["intrahost"],
                                            sample=read_samples_file(config["samples_assembly"])),
            multiple_alignment_fastas = expand("{data_dir}/{subdir}/aligned_{chrom}.fasta",
                                            data_dir=config["data_dir"],
                                            subdir=config["subdirs"]["multialign_ref"],
                                            chrom=range(1, len(config["accessions_for_ref_genome_build"])+1)),
            ref_genome               = objectify_remote(expand( '{refDir}/'+'{ref_name}.fasta', refDir=config["ref_genome_dir"], ref_name="reference" ))
    output:
            raw_vcf             = config["data_dir"]+'/'+config["subdirs"]["intrahost"]+'/isnvs.vcf.gz',
            raw_vcf_index       = config["data_dir"]+'/'+config["subdirs"]["intrahost"]+'/isnvs.vcf.gz.tbi',
            annotated_vcf       = config["data_dir"]+'/'+config["subdirs"]["intrahost"]+'/isnvs.annot.vcf.gz',
            annotation_text     = config["data_dir"]+'/'+config["subdirs"]["intrahost"]+'/isnvs.annot.txt.gz',
            annotated_vcf_index = config["data_dir"]+'/'+config["subdirs"]["intrahost"]+'/isnvs.annot.vcf.gz.tbi'
    resources: mem=4
    params: LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
            UGER=config.get('UGER_queues', {}).get('short', '-q short'),
            logid="all",
            snpEff_ref=" ".join(config["accessions_for_ref_genome_build"]),
            emailAddress=config["email_point_of_contact_for_ncbi"]
    run:
            shell("{config[bin_dir]}/intrahost.py merge_to_vcf {input.ref_genome} {output.raw_vcf}"
                + " --samples " + " ".join(read_samples_file(config["samples_assembly"]))
                + " --isnvs " + " ".join(input.isnv_files)
                + " --alignments " + " ".join(input.multiple_alignment_fastas)
                + " --strip_chr_version"
                + " --parse_accession" # the vcf chr column must match a chr known to snpEff; we have an option to parse out only the accession
                )
            shell("{config[bin_dir]}/interhost.py snpEff {output.raw_vcf} {params.snpEff_ref} {output.annotated_vcf} {params.emailAddress}")
            shell("{config[bin_dir]}/intrahost.py iSNV_table {output.annotated_vcf} {output.annotation_text}")
            
rule isnvs_vcf_filtered:
    input:
            isnv_files               = expand("{data_dir}/{subdir}/vphaser2.{sample}.txt.gz",
                                            data_dir=config["data_dir"],
                                            subdir=config["subdirs"]["intrahost"],
                                            sample=read_samples_file(config["samples_assembly"])),
            multiple_alignment_fastas = expand("{data_dir}/{subdir}/aligned_{chrom}.fasta",
                                            data_dir=config["data_dir"],
                                            subdir=config["subdirs"]["multialign_ref"],
                                            chrom=range(1, len(config["accessions_for_ref_genome_build"])+1)),
            ref_genome               = expand( '{refDir}/'+'{ref_name}.fasta', refDir=config["ref_genome_dir"], ref_name="reference" )
    output:
            raw_vcf             = config["data_dir"]+'/'+config["subdirs"]["intrahost"] +'/isnvs.filtered.vcf.gz',
            raw_vcf_index       = config["data_dir"]+'/'+config["subdirs"]["intrahost"]+'/isnvs.vcf.gz.tbi',
            annotated_vcf       = config["data_dir"]+'/'+config["subdirs"]["intrahost"] +'/isnvs.filtered.annot.vcf.gz',
            annotation_text     = config["data_dir"]+'/'+config["subdirs"]["intrahost"] +'/isnvs.filtered.annot.txt.gz',
            annotated_vcf_index = config["data_dir"]+'/'+config["subdirs"]["intrahost"]+'/isnvs.annot.vcf.gz.tbi'
    resources: mem=4
    params: LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
            UGER=config.get('UGER_queues', {}).get('short', '-q short'),
            logid="all",
            snpEff_ref=" ".join(config["accessions_for_ref_genome_build"]),
            emailAddress=config["email_point_of_contact_for_ncbi"],
            naiveFilter="--naive_filter" if config["vcf_merge_naive_filter"] else ""
    run:
            shell("{config[bin_dir]}/intrahost.py merge_to_vcf {input.ref_genome} {output.raw_vcf}"
                + " --samples " + " ".join(read_samples_file(config["samples_assembly"]))
                + " --isnvs " + " ".join(input.isnv_files)
                + " --alignments " + " ".join(input.multiple_alignment_fastas)
                + " --strip_chr_version"
                + " {params.naiveFilter}"
                + " --parse_accession" # the vcf chr column must match a chr known to snpEff; we have an option to parse out only the accession
                )
            shell("{config[bin_dir]}/interhost.py snpEff {output.raw_vcf} {params.snpEff_ref} {output.annotated_vcf} {params.emailAddress}")
            shell("{config[bin_dir]}/intrahost.py iSNV_table {output.annotated_vcf} {output.annotation_text}")

